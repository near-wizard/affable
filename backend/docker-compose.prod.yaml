services:
  # PostgreSQL Database - Production
  postgres:
    image: postgres:15-alpine
    container_name: affable_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - affiliate_network
    # No ports exposed to host for security

  # Redis - Production
  redis:
    image: redis:7-alpine
    container_name: affiliate_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data_prod:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - affiliate_network

  # FastAPI Application - Production
  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: affiliate_api_prod
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID}
      - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - API_URL=${API_URL}
      - TRACKING_DOMAIN=${TRACKING_DOMAIN}
      - SENTRY_DSN=${SENTRY_DSN:-}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - affiliate_network
    command: gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --access-logfile - --error-logfile -

  # Celery Worker - Production (Multiple instances for scaling)
  celery_worker_1:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: affiliate_celery_worker_1_prod
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN:-}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - affiliate_network
    command: celery -A app.workers.celery_app worker --loglevel=warning --concurrency=8 --max-tasks-per-child=1000

  celery_worker_2:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: affiliate_celery_worker_2_prod
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN:-}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - affiliate_network
    command: celery -A app.workers.celery_app worker --loglevel=warning --concurrency=8 --max-tasks-per-child=1000

  # Celery Beat - Production
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: affiliate_celery_beat_prod
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN:-}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - affiliate_network
    command: celery -A app.workers.celery_app beat --loglevel=warning

  # Nginx Reverse Proxy - Production
  #nginx:
  #  image: nginx:alpine
  #  container_name: affiliate_nginx_prod
  #  ports:
  #    - "80:80"
  #    - "443:443"
  #  volumes:
  #    - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #    - ./nginx/ssl:/etc/nginx/ssl:ro
  #    - ./nginx/logs:/var/log/nginx
  #  restart: unless-stopped
  #  depends_on:
  #    - api
  #  networks:
  #    - affiliate_network

networks:
  affiliate_network:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod:
